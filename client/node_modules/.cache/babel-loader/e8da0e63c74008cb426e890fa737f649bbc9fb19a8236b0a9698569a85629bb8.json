{"ast":null,"code":"import OpenAI from 'openai';\nimport { useEffect } from 'react';\nimport get_pf_data_schema from './getdata';\nrequire('dotenv').config();\nconst axios = require('axios');\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst onstart = async () => {\n  const thread = await openai.beta.threads.create();\n  const message = await openai.beta.threads.messages.create(thread.id, {\n    role: \"user\",\n    content: input\n  });\n  const threadMessages = await openai.beta.threads.messages.list(\"thread_abc123\", message);\n  console.log(threadMessages.data);\n  const assistant = await openai.beta.assistants.create({\n    name: \"Math Tutor\",\n    instructions: \"You are a personal math tutor. Write and run code to answer math questions.\",\n    tools: [{\n      \"type\": \"function\",\n      \"function\": get_pf_data_schema\n    }, {\n      \"type\": \"code_interpreter\"\n    }],\n    model: \"gpt-4-turbo-preview\",\n    messages: thread\n    // messages: [{\"role\": \"system\", \"content\": \"you are a helpful assistant\"}, \n    // { role: 'user', content: input }],\n    // stream: true,\n  });\n\n  //   for await (const chunk of assistant) {\n  //     console.log(chunk.choices[0]?.delta?.content || \"\");\n  //     setResponse(response => [...response, chunk.choices[0]?.delta?.content || \"\"])\n  // }\n};\nconst assistantId = process.env.ASSISTANT_ID;\nconst model = \"gpt-3.5-turbo\";\nconst instructions = `\n  \"Hello, Climate Change Assistant. You help people understand how climate change will affect their homes\"\n  ...\n`;\nconst tools = [{\n  type: \"function\",\n  function: {\n    name: \"get_pf_data\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        address: {\n          type: \"string\",\n          description: \"The address of the location to get data for\"\n        },\n        country: {\n          type: \"string\",\n          description: \"The country of location to get data for\"\n        },\n        warming_scenario: {\n          type: \"string\",\n          enum: [\"1.0\", \"1.5\", \"2.0\", \"2.5\", \"3.0\"],\n          description: \"The warming scenario to get data for. Default is 1.5\"\n        }\n      },\n      required: [\"address\", \"country\"]\n    },\n    description: \"API call to the probable futures API to get predicted climate change indicators for a location\"\n  }\n}, {\n  type: \"function\",\n  function: {\n    name: \"get_current_datetime\",\n    parameters: {\n      type: \"object\",\n      properties: {}\n    },\n    description: \"Returns the current date and time.\"\n  }\n}, {\n  type: \"code_interpreter\"\n}];\nasync function manageAssistant() {\n  try {\n    // Attempt to retrieve the assistant to check if it exists\n    const existingAssistant = await openai.retrieveAssistant({\n      assistant_id: assistantId\n    });\n    console.log(\"Updating existing assistant ...\");\n    // Update the assistant if it exists\n    const updatedAssistant = await openai.updateAssistant({\n      assistant_id: assistantId,\n      name: \"Climate Change Assistant\",\n      model\n      // Additional properties like `instructions` and `tools` can be modified here if the API supports it\n    });\n    console.log(updatedAssistant.data);\n    a;\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      console.log(\"Creating assistant ...\");\n      // Create a new assistant if it doesn't exist\n      const newAssistant = await openai.createAssistant({\n        name: \"Climate Change Assistant\",\n        model\n        // The current API may not directly support `instructions` and `tools` in this manner; adjust accordingly\n      });\n      console.log(newAssistant.data);\n      console.log(\"Now save the ID in your .env file\");\n    } else {\n      console.error(\"An error occurred:\", error.message);\n    }\n  }\n}\nmanageAssistant().catch(console.error);","map":{"version":3,"names":["OpenAI","useEffect","get_pf_data_schema","require","config","axios","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","onstart","thread","beta","threads","create","message","messages","id","role","content","input","threadMessages","list","console","log","data","assistant","assistants","name","instructions","tools","model","assistantId","ASSISTANT_ID","type","function","parameters","properties","address","description","country","warming_scenario","enum","required","manageAssistant","existingAssistant","retrieveAssistant","assistant_id","updatedAssistant","updateAssistant","a","error","response","status","newAssistant","createAssistant","catch"],"sources":["/Users/Aaron/Desktop/climate-guide/client/src/apis/openai/index.js"],"sourcesContent":["import OpenAI from 'openai';\nimport { useEffect } from 'react';\nimport get_pf_data_schema from './getdata'\nrequire('dotenv').config();\n\nconst axios = require('axios');\n\n\nconst openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n\n\nconst onstart = async () => {\n\n    const thread = await openai.beta.threads.create();\n    const message = await openai.beta.threads.messages.create(\n        thread.id,\n        {\n          role: \"user\",\n          content: input\n        }\n      );\n\n    const threadMessages = await openai.beta.threads.messages.list(\n        \"thread_abc123\", message\n      );\n    \n      console.log(threadMessages.data);\n \n    \n    \n \n\n\n    const assistant = await openai.beta.assistants.create({\n        name: \"Math Tutor\",\n        instructions: \"You are a personal math tutor. Write and run code to answer math questions.\",\n        tools: [\n            {\n                \"type\": \"function\",\n                \"function\": get_pf_data_schema,\n            },\n            {\"type\": \"code_interpreter\"},\n        ],\n        model: \"gpt-4-turbo-preview\",\n        messages: thread\n        // messages: [{\"role\": \"system\", \"content\": \"you are a helpful assistant\"}, \n        // { role: 'user', content: input }],\n        // stream: true,\n      });\n      \n\n    //   for await (const chunk of assistant) {\n    //     console.log(chunk.choices[0]?.delta?.content || \"\");\n    //     setResponse(response => [...response, chunk.choices[0]?.delta?.content || \"\"])\n    // }\n      \n};\n \n\n\nconst assistantId = process.env.ASSISTANT_ID;\nconst model = \"gpt-3.5-turbo\";\n\nconst instructions = `\n  \"Hello, Climate Change Assistant. You help people understand how climate change will affect their homes\"\n  ...\n`;\n\nconst tools = [\n  {\n    type: \"function\",\n    function: {\n      name: \"get_pf_data\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          address: { type: \"string\", description: \"The address of the location to get data for\" },\n          country: { type: \"string\", description: \"The country of location to get data for\" },\n          warming_scenario: {\n            type: \"string\",\n            enum: [\"1.0\", \"1.5\", \"2.0\", \"2.5\", \"3.0\"],\n            description: \"The warming scenario to get data for. Default is 1.5\",\n          },\n        },\n        required: [\"address\", \"country\"],\n      },\n      description: \"API call to the probable futures API to get predicted climate change indicators for a location\",\n    },\n  },\n  {\n    type: \"function\",\n    function: {\n      name: \"get_current_datetime\",\n      parameters: { type: \"object\", properties: {} },\n      description: \"Returns the current date and time.\",\n    },\n  },\n  { type: \"code_interpreter\" },\n];\n\nasync function manageAssistant() {\n  try {\n    // Attempt to retrieve the assistant to check if it exists\n    const existingAssistant = await openai.retrieveAssistant({\n      assistant_id: assistantId,\n    });\n\n    console.log(\"Updating existing assistant ...\");\n    // Update the assistant if it exists\n    const updatedAssistant = await openai.updateAssistant({\n      assistant_id: assistantId,\n      name: \"Climate Change Assistant\",\n      model,\n      // Additional properties like `instructions` and `tools` can be modified here if the API supports it\n    });\n    console.log(updatedAssistant.data);\n    a\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      console.log(\"Creating assistant ...\");\n      // Create a new assistant if it doesn't exist\n      const newAssistant = await openai.createAssistant({\n        name: \"Climate Change Assistant\",\n        model,\n        // The current API may not directly support `instructions` and `tools` in this manner; adjust accordingly\n      });\n      console.log(newAssistant.data);\n      console.log(\"Now save the ID in your .env file\");\n    } else {\n      console.error(\"An error occurred:\", error.message);\n    }\n  }\n}\n\nmanageAssistant().catch(console.error);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}