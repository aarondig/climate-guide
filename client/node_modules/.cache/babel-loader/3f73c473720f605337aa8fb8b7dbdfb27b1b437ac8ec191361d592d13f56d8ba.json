{"ast":null,"code":"const axios = require(\"axios\");\nconst router = require(\"express\").Router();\nconst pfApiUrl = \"https://graphql.probablefutures.org\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\nconst clientId = \"FQCzxCCBAh0wih1Yx0DFqheeldF0T6FD\";\nconst clientSecret = \"v6mbHDocvyWPM9pNYNBxvdZda1_yFq4DY_1QS5kVNWuGZGlDg4Lri89szt1KIe8W\";\nrouter.get(\"/\", (req, res) => {\n  async function getPfToken() {\n    // const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n    // const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n    try {\n      const response = await axios.post(pfTokenUrl, {\n        client_id: clientId,\n        client_secret: clientSecret,\n        audience: pfTokenAudience,\n        grant_type: \"client_credentials\"\n      });\n      const accessToken = response.data.access_token;\n      return accessToken;\n    } catch (error) {\n      console.error('Error fetching the access token:', error);\n      return null;\n    }\n  }\n  async function getPfData() {\n    const country = req.query.country;\n    const address = req.query.address;\n    const warmingScenario = `${req.query.warming_scenario !== undefined ? req.query.warming_scenario : 1.5}`;\n    const variables = {};\n    const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n    const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n    try {\n      const accessToken = await getPfToken();\n      const url = pfApiUrl + \"/graphql\";\n      const headers = {\n        Authorization: \"Bearer \" + accessToken\n      };\n      const response = await axios.post(url, {\n        query: query,\n        variables: variables\n      }, {\n        headers: headers\n      });\n      await res.send(JSON.stringify(response.data));\n      return JSON.stringify(response.data);\n    } catch (error) {\n      console.error('Error fetching the data:', error);\n      return null;\n    }\n  }\n  return getPfData();\n});\nmodule.exports = router;","map":{"version":3,"names":["axios","require","router","Router","pfApiUrl","pfTokenAudience","pfTokenUrl","clientId","clientSecret","get","req","res","getPfToken","response","post","client_id","client_secret","audience","grant_type","accessToken","data","access_token","error","console","getPfData","country","query","address","warmingScenario","warming_scenario","undefined","variables","location","url","headers","Authorization","send","JSON","stringify","module","exports"],"sources":["/Users/Aaron/Desktop/climate-guide/client/src/apis/probablefutures.js"],"sourcesContent":["const axios = require(\"axios\");\nconst router = require(\"express\").Router();\n\n\nconst pfApiUrl = \"https://graphql.probablefutures.org\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\nconst clientId = \"FQCzxCCBAh0wih1Yx0DFqheeldF0T6FD\"\nconst clientSecret = \"v6mbHDocvyWPM9pNYNBxvdZda1_yFq4DY_1QS5kVNWuGZGlDg4Lri89szt1KIe8W\"\n\nrouter.get(\"/\", (req, res) => {\n\n  async function getPfToken() {\n    // const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n    // const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n    try {\n        const response = await axios.post(pfTokenUrl, {\n            client_id: clientId,\n            client_secret: clientSecret,\n            audience: pfTokenAudience,\n            grant_type: \"client_credentials\",\n        });\n        const accessToken = response.data.access_token;\n        return accessToken;\n    } catch (error) {\n        console.error('Error fetching the access token:', error);\n        return null;\n    }\n}\n\nasync function getPfData() {\nconst country = req.query.country;\nconst address = req.query.address;\nconst warmingScenario = `${req.query.warming_scenario !== undefined ? req.query.warming_scenario : 1.5}`;\n\n    const variables = {};\n    const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n\n    const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n\n    try {\n        const accessToken = await getPfToken();\n        const url = pfApiUrl + \"/graphql\";\n        const headers = { Authorization: \"Bearer \" + accessToken };\n        const response = await axios.post(url, { query: query, variables: variables }, { headers: headers });\n        await res.send(JSON.stringify(response.data))\n        return JSON.stringify(response.data);\n    } catch (error) {\n        console.error('Error fetching the data:', error);\n        return null;\n    }\n}\n\nreturn getPfData();\n});\n\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACE,MAAM,CAAC,CAAC;AAG1C,MAAMC,QAAQ,GAAG,qCAAqC;AACtD,MAAMC,eAAe,GAAG,qCAAqC;AAC7D,MAAMC,UAAU,GAAG,kDAAkD;AAErE,MAAMC,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,YAAY,GAAG,kEAAkE;AAEvFN,MAAM,CAACO,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAE5B,eAAeC,UAAUA,CAAA,EAAG;IAC1B;IACA;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAACR,UAAU,EAAE;QAC1CS,SAAS,EAAER,QAAQ;QACnBS,aAAa,EAAER,YAAY;QAC3BS,QAAQ,EAAEZ,eAAe;QACzBa,UAAU,EAAE;MAChB,CAAC,CAAC;MACF,MAAMC,WAAW,GAAGN,QAAQ,CAACO,IAAI,CAACC,YAAY;MAC9C,OAAOF,WAAW;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,IAAI;IACf;EACJ;EAEA,eAAeE,SAASA,CAAA,EAAG;IAC3B,MAAMC,OAAO,GAAGf,GAAG,CAACgB,KAAK,CAACD,OAAO;IACjC,MAAME,OAAO,GAAGjB,GAAG,CAACgB,KAAK,CAACC,OAAO;IACjC,MAAMC,eAAe,GAAI,GAAElB,GAAG,CAACgB,KAAK,CAACG,gBAAgB,KAAKC,SAAS,GAAGpB,GAAG,CAACgB,KAAK,CAACG,gBAAgB,GAAG,GAAI,EAAC;IAEpG,MAAME,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,QAAQ,GAAI;AACtB,oBAAoBP,OAAQ;AAC5B,oBAAoBE,OAAQ;AAC5B,KAAK;IAED,MAAMD,KAAK,GAAI;AACnB;AACA,4CAA4CM,QAAS;AACrD,wCAAwCJ,eAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,IAAI;MACA,MAAMT,WAAW,GAAG,MAAMP,UAAU,CAAC,CAAC;MACtC,MAAMqB,GAAG,GAAG7B,QAAQ,GAAG,UAAU;MACjC,MAAM8B,OAAO,GAAG;QAAEC,aAAa,EAAE,SAAS,GAAGhB;MAAY,CAAC;MAC1D,MAAMN,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAACmB,GAAG,EAAE;QAAEP,KAAK,EAAEA,KAAK;QAAEK,SAAS,EAAEA;MAAU,CAAC,EAAE;QAAEG,OAAO,EAAEA;MAAQ,CAAC,CAAC;MACpG,MAAMvB,GAAG,CAACyB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACzB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAC7C,OAAOiB,IAAI,CAACC,SAAS,CAACzB,QAAQ,CAACO,IAAI,CAAC;IACxC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,IAAI;IACf;EACJ;EAEA,OAAOE,SAAS,CAAC,CAAC;AAClB,CAAC,CAAC;AAEFe,MAAM,CAACC,OAAO,GAAGtC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}