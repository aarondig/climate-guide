{"ast":null,"code":"const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\n// async function getPfToken() {\n//     console.log(process.env.REACT_APP_PF_CLIENT_ID)\n//     const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n//     const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n//     try {\n//         const response = await fetch(pfTokenUrl, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 client_id: clientId,\n//                 client_secret: clientSecret,\n//                 audience: pfTokenAudience,\n//                 grant_type: \"client_credentials\",\n//             }),\n//             // body: {\n//             //     \"client_id\": clientId,\n//             //     \"client_secret\": clientSecret,\n//             //     \"audience\": pfTokenAudience,\n//             //     \"grant_type\": \"client_credentials\",\n//             // },\n//         });\n//         const data = await response.json();\n//         return data.access_token;\n//     } catch (error) {\n//         console.error('Error fetching the access token:', error);\n//         return null;\n//     }\n// }\nasync function getPfToken() {\n  const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n  try {\n    const response = await axios.post(pfTokenUrl, {\n      client_id: clientId,\n      client_secret: clientSecret,\n      audience: pfTokenAudience,\n      grant_type: \"client_credentials\"\n    });\n    const accessToken = response.data.access_token;\n    return accessToken;\n  } catch (error) {\n    console.error('Error fetching the access token:', error);\n    return null;\n  }\n}\nexport async function getPfData(address, country, warmingScenario = \"1.5\") {\n  const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n  const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n  console.log(query);\n  try {\n    const accessToken = await getPfToken();\n    const response = await fetch(pfApiUrl + \"/graphql\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: {}\n      })\n    });\n    const data = await response.json();\n    return JSON.stringify(data);\n  } catch (error) {\n    console.error('Error fetching the data:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["pfApiUrl","pfTokenAudience","pfTokenUrl","getPfToken","clientId","process","env","REACT_APP_PF_CLIENT_ID","clientSecret","REACT_APP_PF_PASSWORD","response","axios","post","client_id","client_secret","audience","grant_type","accessToken","data","access_token","error","console","getPfData","address","country","warmingScenario","location","query","log","fetch","method","headers","body","JSON","stringify","variables","json"],"sources":["/Users/Aaron/Desktop/climate-guide/src/apis/probablefutures.js"],"sourcesContent":["const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\n// async function getPfToken() {\n//     console.log(process.env.REACT_APP_PF_CLIENT_ID)\n//     const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n//     const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n//     try {\n//         const response = await fetch(pfTokenUrl, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 client_id: clientId,\n//                 client_secret: clientSecret,\n//                 audience: pfTokenAudience,\n//                 grant_type: \"client_credentials\",\n//             }),\n//             // body: {\n//             //     \"client_id\": clientId,\n//             //     \"client_secret\": clientSecret,\n//             //     \"audience\": pfTokenAudience,\n//             //     \"grant_type\": \"client_credentials\",\n//             // },\n//         });\n//         const data = await response.json();\n//         return data.access_token;\n//     } catch (error) {\n//         console.error('Error fetching the access token:', error);\n//         return null;\n//     }\n// }\nasync function getPfToken() {\n    const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n    const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n    try {\n        const response = await axios.post(pfTokenUrl, {\n            client_id: clientId,\n            client_secret: clientSecret,\n            audience: pfTokenAudience,\n            grant_type: \"client_credentials\",\n        });\n        const accessToken = response.data.access_token;\n        return accessToken;\n    } catch (error) {\n        console.error('Error fetching the access token:', error);\n        return null;\n    }\n}\nexport async function getPfData(address, country, warmingScenario = \"1.5\") {\n    const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n\n    const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n\n    console.log(query);\n\n    try {\n        const accessToken = await getPfToken();\n        const response = await fetch(pfApiUrl + \"/graphql\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + accessToken,\n            },\n            body: JSON.stringify({ query: query, variables: {} }),\n        });\n        const data = await response.json();\n        return JSON.stringify(data);\n    } catch (error) {\n        console.error('Error fetching the data:', error);\n        return null;\n    }\n}\n\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,6CAA6C;AAC9D,MAAMC,eAAe,GAAG,qCAAqC;AAC7D,MAAMC,UAAU,GAAG,kDAAkD;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EACnD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,qBAAqB;EACtD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAACV,UAAU,EAAE;MAC1CW,SAAS,EAAET,QAAQ;MACnBU,aAAa,EAAEN,YAAY;MAC3BO,QAAQ,EAAEd,eAAe;MACzBe,UAAU,EAAE;IAChB,CAAC,CAAC;IACF,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,IAAI,CAACC,YAAY;IAC9C,OAAOF,WAAW;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACf;AACJ;AACA,OAAO,eAAeE,SAASA,CAACC,OAAO,EAAEC,OAAO,EAAEC,eAAe,GAAG,KAAK,EAAE;EACvE,MAAMC,QAAQ,GAAI;AACtB,oBAAoBF,OAAQ;AAC5B,oBAAoBD,OAAQ;AAC5B,KAAK;EAED,MAAMI,KAAK,GAAI;AACnB;AACA,4CAA4CD,QAAS;AACrD,wCAAwCD,eAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAEDJ,OAAO,CAACO,GAAG,CAACD,KAAK,CAAC;EAElB,IAAI;IACA,MAAMV,WAAW,GAAG,MAAMd,UAAU,CAAC,CAAC;IACtC,MAAMO,QAAQ,GAAG,MAAMmB,KAAK,CAAC7B,QAAQ,GAAG,UAAU,EAAE;MAChD8B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGd;MACjC,CAAC;MACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,KAAK,EAAEA,KAAK;QAAEQ,SAAS,EAAE,CAAC;MAAE,CAAC;IACxD,CAAC,CAAC;IACF,MAAMjB,IAAI,GAAG,MAAMR,QAAQ,CAAC0B,IAAI,CAAC,CAAC;IAClC,OAAOH,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC;EAC/B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}