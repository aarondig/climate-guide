{"ast":null,"code":"const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\nexport async function getPfToken() {\n  console.log(process.env.REACT_APP_PF_CLIENT_ID);\n  const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n  var myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", `Bearer ${clientSecret}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  var graphql = JSON.stringify({\n    query: 'mutation {\\n      getDatasetStatistics(\\n        input: {country: \"us\", address: \"121 East 48th Street, Apt. 123, New York, NY 10001\", warmingScenario: \"1.5\", datasetId: null}\\n      ) {\\n        datasetStatisticsResponses {\\n          datasetId\\n          highValue\\n          lowValue\\n          midValue\\n          name\\n          unit\\n          warmingScenario\\n          longitude\\n          latitude\\n      }\\n    }\\n}',\n    variables: {}\n  });\n  var requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: graphql\n  };\n  fetch(\"https://graphql.probablefutures.org/graphql\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n\n  // try {\n  //     const response = await fetch(pfTokenUrl, {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify({\n  //             client_id: clientId,\n  //             client_secret: clientSecret,\n  //             audience: pfTokenAudience,\n  //             grant_type: \"client_credentials\",\n  //         }),\n  //         // body: {\n  //         //     \"client_id\": clientId,\n  //         //     \"client_secret\": clientSecret,\n  //         //     \"audience\": pfTokenAudience,\n  //         //     \"grant_type\": \"client_credentials\",\n  //         // },\n  //     });\n  //     const data = await response.json();\n  //     return data.access_token;\n  // } catch (error) {\n  //     console.error('Error fetching the access token:', error);\n  //     return null;\n  // }\n}\n\n//  async function getPfData(address, country, warmingScenario = \"1.5\") {\n//     const location = `\n//         country: \"${country}\"\n//         address: \"${address}\"\n//     `;\n\n//     const query = `\n//         mutation {\n//             getDatasetStatistics(input: { ${location}\n//                     warmingScenario: \"${warmingScenario}\"\n//                 }) {\n//                 datasetStatisticsResponses{\n//                     datasetId\n//                     midValue\n//                     name\n//                     unit\n//                     warmingScenario\n//                     latitude\n//                     longitude\n//                     info\n//                 }\n//             }\n//         }\n//     `;\n\n//     console.log(query);\n\n//     try {\n//         const accessToken = await getPfToken();\n//         const response = await fetch(pfApiUrl + \"/graphql\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': 'Bearer ' + accessToken,\n//             },\n//             body: JSON.stringify({ query: query, variables: {} }),\n//         });\n//         const data = await response.json();\n//         return JSON.stringify(data);\n//     } catch (error) {\n//         console.error('Error fetching the data:', error);\n//         return null;\n//     }\n// }","map":{"version":3,"names":["pfApiUrl","pfTokenAudience","pfTokenUrl","getPfToken","console","log","process","env","REACT_APP_PF_CLIENT_ID","clientId","clientSecret","REACT_APP_PF_PASSWORD","myHeaders","Headers","append","graphql","JSON","stringify","query","variables","requestOptions","method","headers","body","fetch","then","response","text","result","catch","error"],"sources":["/Users/Aaron/Desktop/climate-guide/src/apis/probablefutures.js"],"sourcesContent":["const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\nexport async function getPfToken() {\n  console.log(process.env.REACT_APP_PF_CLIENT_ID);\n  const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", `Bearer ${clientSecret}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  var graphql = JSON.stringify({\n    query:\n      'mutation {\\n      getDatasetStatistics(\\n        input: {country: \"us\", address: \"121 East 48th Street, Apt. 123, New York, NY 10001\", warmingScenario: \"1.5\", datasetId: null}\\n      ) {\\n        datasetStatisticsResponses {\\n          datasetId\\n          highValue\\n          lowValue\\n          midValue\\n          name\\n          unit\\n          warmingScenario\\n          longitude\\n          latitude\\n      }\\n    }\\n}',\n    variables: {},\n  });\n  var requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: graphql,\n  };\n\n  fetch(\"https://graphql.probablefutures.org/graphql\", requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log(\"error\", error));\n\n  // try {\n  //     const response = await fetch(pfTokenUrl, {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify({\n  //             client_id: clientId,\n  //             client_secret: clientSecret,\n  //             audience: pfTokenAudience,\n  //             grant_type: \"client_credentials\",\n  //         }),\n  //         // body: {\n  //         //     \"client_id\": clientId,\n  //         //     \"client_secret\": clientSecret,\n  //         //     \"audience\": pfTokenAudience,\n  //         //     \"grant_type\": \"client_credentials\",\n  //         // },\n  //     });\n  //     const data = await response.json();\n  //     return data.access_token;\n  // } catch (error) {\n  //     console.error('Error fetching the access token:', error);\n  //     return null;\n  // }\n}\n\n//  async function getPfData(address, country, warmingScenario = \"1.5\") {\n//     const location = `\n//         country: \"${country}\"\n//         address: \"${address}\"\n//     `;\n\n//     const query = `\n//         mutation {\n//             getDatasetStatistics(input: { ${location}\n//                     warmingScenario: \"${warmingScenario}\"\n//                 }) {\n//                 datasetStatisticsResponses{\n//                     datasetId\n//                     midValue\n//                     name\n//                     unit\n//                     warmingScenario\n//                     latitude\n//                     longitude\n//                     info\n//                 }\n//             }\n//         }\n//     `;\n\n//     console.log(query);\n\n//     try {\n//         const accessToken = await getPfToken();\n//         const response = await fetch(pfApiUrl + \"/graphql\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': 'Bearer ' + accessToken,\n//             },\n//             body: JSON.stringify({ query: query, variables: {} }),\n//         });\n//         const data = await response.json();\n//         return JSON.stringify(data);\n//     } catch (error) {\n//         console.error('Error fetching the data:', error);\n//         return null;\n//     }\n// }\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,6CAA6C;AAC9D,MAAMC,eAAe,GAAG,qCAAqC;AAC7D,MAAMC,UAAU,GAAG,kDAAkD;AAErE,OAAO,eAAeC,UAAUA,CAAA,EAAG;EACjCC,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;EAC/C,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACC,sBAAsB;EACnD,MAAME,YAAY,GAAGJ,OAAO,CAACC,GAAG,CAACI,qBAAqB;EAEtD,IAAIC,SAAS,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7BD,SAAS,CAACE,MAAM,CAAC,eAAe,EAAG,UAASJ,YAAa,EAAC,CAAC;EAC3DE,SAAS,CAACE,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAEpD,IAAIC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAAC;IAC3BC,KAAK,EACH,2aAA2a;IAC7aC,SAAS,EAAE,CAAC;EACd,CAAC,CAAC;EACF,IAAIC,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAEV,SAAS;IAClBW,IAAI,EAAER;EACR,CAAC;EAEDS,KAAK,CAAC,6CAA6C,EAAEJ,cAAc,CAAC,CACjEK,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,MAAM,IAAKxB,OAAO,CAACC,GAAG,CAACuB,MAAM,CAAC,CAAC,CACrCC,KAAK,CAAEC,KAAK,IAAK1B,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEyB,KAAK,CAAC,CAAC;;EAEhD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}