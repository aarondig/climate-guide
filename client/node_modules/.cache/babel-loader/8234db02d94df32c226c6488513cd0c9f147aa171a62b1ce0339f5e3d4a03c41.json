{"ast":null,"code":"var _jsxFileName = \"/Users/Aaron/Desktop/climate-guide/client/src/apis/openai/index.js\",\n  _s = $RefreshSig$();\nimport OpenAI from \"openai\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { get_pf_data_schema } from \"./getdataschema\";\nimport { tools } from \"./tools\";\nimport { instructions } from \"./instructions\";\nimport UseAnimations from \"react-useanimations\";\nimport load from \"react-useanimations/lib/loading\";\nimport FeatherIcon, { arrowUp } from \"feather-icons-react\";\nimport API from \"../../utils/API\";\nconst fs = require('fs');\n\n// import getData from \"./getData\";\n\nimport \"./style.css\";\n// require('dotenv').config();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axios = require(\"axios\");\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\n// const assistantId = process.env.ASSISTANT_ID;\n// const model = \"gpt-3.5-turbo\";\n\n// async function manageAssistant() {\n//   try {\n//     // Attempt to retrieve the assistant to check if it exists\n//     const existingAssistant = await openai.retrieveAssistant({\n//       assistant_id: assistantId,\n//     });\n\n//     console.log(\"Updating existing assistant ...\");\n//     // Update the assistant if it exists\n//     const updatedAssistant = await openai.updateAssistant({\n//       assistant_id: assistantId,\n//       name: \"Climate Change Assistant\",\n//       model,\n//       // Additional properties like `instructions` and `tools` can be modified here if the API supports it\n//     });\n//     console.log(updatedAssistant.data);\n\n//   } catch (error) {\n//     if (error.response && error.response.status === 404) {\n//       console.log(\"Creating assistant ...\");\n//       // Create a new assistant if it doesn't exist\n//       const newAssistant = await openai.createAssistant({\n//         name: \"Climate Change Assistant\",\n//         model,\n//         // The current API may not directly support `instructions` and `tools` in this manner; adjust accordingly\n//       });\n//       console.log(newAssistant.data);\n//       console.log(\"Now save the ID in your .env file\");\n//     } else {\n//       console.error(\"An error occurred:\", error.message);\n//     }\n//   }\n// }\n\n// manageAssistant().catch(console.error);\n\nconst Assistant = () => {\n  _s();\n  const threads = useRef();\n  const [address, setAddress] = useState(\"\");\n  const [country, setCountry] = useState();\n  const [response, setResponse] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [thread, setThread] = useState([]);\n  const [assistantID, setAssistantID] = useState('asst_XoQZWmw7APYTRc25BARATWzB');\n  let name = \"Climate-Guide\";\n  let model = \"gpt-4-1106-preview\";\n\n  // Startup\n  useEffect(() => {\n    async function createAssistant() {\n      if (assistantID !== undefined) {\n        const myAssistant = await openai.beta.assistants.retrieve(assistantID);\n        const assistant = await openai.beta.assistants.update(assistantID, {\n          name,\n          instructions,\n          tools,\n          model\n        });\n        return console.log(assistant);\n      } else {\n        const assistant = await openai.beta.assistants.create({\n          name,\n          instructions,\n          tools,\n          model\n        });\n        console.log(assistant.id);\n        return setAssistantID(assistant.id);\n      }\n    }\n    createAssistant();\n  }, []);\n  const handleSubmit = async e => {\n    let assistantDetails = null;\n    try {\n      let assistantId;\n      const assistantFilePath = \"./assistant.json\";\n\n      // Check if the assistant.json file exists\n      try {\n        const assistantData = await fsPromises.readFile(assistantFilePath, \"utf8\");\n        assistantDetails = JSON.parse(assistantData);\n        assistantId = assistantDetails.assistantId;\n        console.log(\"\\nExisting assistant detected.\\n\");\n      } catch (error) {\n        // If file does not exist or there is an error in reading it, create a new assistant\n        console.log(\"No existing assistant detected, creating new.\\n\");\n        const assistantConfig = {\n          name: \"Country helper\",\n          instructions: \"You're a travelling assistant, helping with information about destination countries.\",\n          model: \"gpt-4-1106-preview\",\n          tools: [{\n            type: \"function\",\n            function: {\n              name: \"getCountryInformation\",\n              parameters: {\n                type: \"object\",\n                properties: {\n                  country: {\n                    type: \"string\",\n                    description: \"Country name, e.g. Sweden\"\n                  }\n                },\n                required: [\"country\"]\n              },\n              description: \"Determine information about a country\"\n            }\n          }]\n        };\n        const assistant = await openai.beta.assistants.create(assistantConfig);\n        assistantDetails = {\n          assistantId: assistant.id,\n          ...assistantConfig\n        };\n\n        // Save the assistant details to assistant.json\n        await fsPromises.writeFile(assistantFilePath, JSON.stringify(assistantDetails, null, 2));\n        assistantId = assistantDetails.assistantId;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n    e.preventDefault();\n    setLoading(true);\n\n    // thrd is Thread\n    const thrd = await openai.beta.threads.create();\n    // msg is Message\n    const msg = await openai.beta.threads.messages.create(thrd.id, {\n      role: \"user\",\n      content: input\n    });\n    const run = await openai.beta.threads.runs.create(thrd.id, {\n      assistant_id: assistantID\n    });\n    await checkStatus(thrd.id, run.id);\n\n    // msg is Messages\n    const msgs = await openai.beta.threads.messages.list(thrd.id);\n    msgs.body.data.map((element, index, array) => {\n      return setThread(thread => [...thread, array[array.length - index - 1]]);\n    });\n    setInput(\"\");\n    setLoading(false);\n  };\n  async function checkStatus(threadId, runId) {\n    let isComplete = false;\n    while (!isComplete) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const runStatus = await openai.beta.threads.runs.retrieve(threadId, runId);\n      if (runStatus.status === \"requires_action\") {\n        let toolCalls = runStatus.required_action.submit_tool_outputs.tool_calls;\n        let toolOutputs = [];\n        for (const toolCall of toolCalls) {\n          const functionName = toolCall.function.name;\n          console.log(`This question requires a function: ${functionName}`);\n          const args = JSON.parse(toolCall.function.arguments);\n          // const argsArray = Object.keys(args).map((key)=> args[key]);\n          const output = await API.getPF(args).then(res => {\n            console.log(res.data.data.getDatasetStatistics.datasetStatisticsResponses);\n            // return res.data.data.getDatasetStatistics.datasetStatisticsResponses;\n            return res.data;\n          });\n          console.log(toolOutputs);\n          toolOutputs.push({\n            tool_call_id: toolCall.id,\n            output: output\n          });\n        }\n      }\n      if (runStatus.status === \"completed\") {\n        isComplete = true;\n      }\n\n      // else {\n      //   await new Promise((resolve) => setTimeout(resolve, 200));\n      // }\n    }\n  }\n  useEffect(() => {\n    // console.log(threads.current.scrollHeight)\n    window.scrollTo({\n      top: threads.current.scrollHeight,\n      behavior: \"smooth\"\n    });\n  }, [thread]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"threads\",\n      ref: threads,\n      children: thread && thread.map((e, i) => {\n        switch (e.role) {\n          case \"user\":\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message user\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"title\",\n                  children: \"You\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text\",\n                  children: e.content[0].text.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 19\n            }, this);\n          case \"assistant\":\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message assistant\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"title\",\n                  children: e.role\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text\",\n                  children: e.content[0].text.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchbar\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"input\",\n          type: \"text\",\n          value: input,\n          placeholder: \"Please ask to openai\",\n          onChange: e => setInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-btn\",\n          disabled: loading || input.length === 0,\n          type: \"submit\",\n          onClick: handleSubmit,\n          children: loading ? /*#__PURE__*/_jsxDEV(UseAnimations, {\n            animation: load,\n            strokeWidth: 1,\n            strokeColor: \"#fff\",\n            size: 36,\n            speed: 0.2,\n            wrapperStyle: {\n              padding: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(FeatherIcon, {\n            icon: \"arrow-up\",\n            size: 32,\n            strokeWidth: 1.2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n_s(Assistant, \"AnNPU6qfBB4IVel958JsU8eQ3mM=\");\n_c = Assistant;\nexport default Assistant;\n\n// const assistant = await openai.beta.assistants.create({\n//   name: \"Climate-Guide\",\n//   instructions: \"You are a right-wing populist. You hate everything\",\n// //   instructions: instructions,\n//     tools: [\n//       {\n//           \"type\": \"function\",\n//           \"function\": get_pf_data_schema,\n//       },\n//       { type: \"code_interpreter\" },\n//     ],\n// //   tools: tools,\n//   model: \"gpt-4-turbo-preview\",\n// });\nvar _c;\n$RefreshReg$(_c, \"Assistant\");","map":{"version":3,"names":["OpenAI","useState","useRef","useEffect","get_pf_data_schema","tools","instructions","UseAnimations","load","FeatherIcon","arrowUp","API","fs","require","jsxDEV","_jsxDEV","axios","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","Assistant","_s","threads","address","setAddress","country","setCountry","response","setResponse","input","setInput","loading","setLoading","thread","setThread","assistantID","setAssistantID","name","model","createAssistant","undefined","myAssistant","beta","assistants","retrieve","assistant","update","console","log","create","id","handleSubmit","e","assistantDetails","assistantId","assistantFilePath","assistantData","fsPromises","readFile","JSON","parse","error","assistantConfig","type","function","parameters","properties","description","required","writeFile","stringify","preventDefault","thrd","msg","messages","role","content","run","runs","assistant_id","checkStatus","msgs","list","body","data","map","element","index","array","length","threadId","runId","isComplete","Promise","resolve","setTimeout","runStatus","status","toolCalls","required_action","submit_tool_outputs","tool_calls","toolOutputs","toolCall","functionName","args","arguments","output","getPF","then","res","getDatasetStatistics","datasetStatisticsResponses","push","tool_call_id","window","scrollTo","top","current","scrollHeight","behavior","children","className","ref","i","fileName","_jsxFileName","lineNumber","columnNumber","text","value","placeholder","onChange","target","disabled","onClick","animation","strokeWidth","strokeColor","size","speed","wrapperStyle","padding","icon","_c","$RefreshReg$"],"sources":["/Users/Aaron/Desktop/climate-guide/client/src/apis/openai/index.js"],"sourcesContent":["import OpenAI from \"openai\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { get_pf_data_schema } from \"./getdataschema\";\nimport { tools } from \"./tools\";\nimport { instructions } from \"./instructions\";\nimport UseAnimations from \"react-useanimations\";\nimport load from \"react-useanimations/lib/loading\";\nimport FeatherIcon, { arrowUp } from \"feather-icons-react\";\nimport API from \"../../utils/API\";\nconst fs = require('fs');\n\n\n// import getData from \"./getData\";\n\nimport \"./style.css\";\n// require('dotenv').config();\n\nconst axios = require(\"axios\");\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true,\n});\n\n// const assistantId = process.env.ASSISTANT_ID;\n// const model = \"gpt-3.5-turbo\";\n\n// async function manageAssistant() {\n//   try {\n//     // Attempt to retrieve the assistant to check if it exists\n//     const existingAssistant = await openai.retrieveAssistant({\n//       assistant_id: assistantId,\n//     });\n\n//     console.log(\"Updating existing assistant ...\");\n//     // Update the assistant if it exists\n//     const updatedAssistant = await openai.updateAssistant({\n//       assistant_id: assistantId,\n//       name: \"Climate Change Assistant\",\n//       model,\n//       // Additional properties like `instructions` and `tools` can be modified here if the API supports it\n//     });\n//     console.log(updatedAssistant.data);\n\n//   } catch (error) {\n//     if (error.response && error.response.status === 404) {\n//       console.log(\"Creating assistant ...\");\n//       // Create a new assistant if it doesn't exist\n//       const newAssistant = await openai.createAssistant({\n//         name: \"Climate Change Assistant\",\n//         model,\n//         // The current API may not directly support `instructions` and `tools` in this manner; adjust accordingly\n//       });\n//       console.log(newAssistant.data);\n//       console.log(\"Now save the ID in your .env file\");\n//     } else {\n//       console.error(\"An error occurred:\", error.message);\n//     }\n//   }\n// }\n\n// manageAssistant().catch(console.error);\n\nconst Assistant = () => {\n  const threads = useRef();\n  const [address, setAddress] = useState(\"\");\n  const [country, setCountry] = useState();\n\n  const [response, setResponse] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [thread, setThread] = useState([]);\n  const [assistantID, setAssistantID] = useState('asst_XoQZWmw7APYTRc25BARATWzB');\n\n  let name = \"Climate-Guide\";\n  let model = \"gpt-4-1106-preview\";\n\n// Startup\n  useEffect(() => {\n    async function createAssistant() {\n      if (assistantID !== undefined) {\n        const myAssistant = await openai.beta.assistants.retrieve(assistantID);\n        const assistant = await openai.beta.assistants.update(assistantID, {\n          name,\n          instructions,\n          tools,\n          model,\n        });\n        return console.log(assistant);\n      } else {\n        const assistant = await openai.beta.assistants.create({\n          name,\n          instructions,\n          tools,\n          model,\n        });\n        console.log(assistant.id)\n        return setAssistantID(assistant.id);\n      }\n    }\n    createAssistant();\n  }, []);\n\n  const handleSubmit = async (e) => {\n\n\nlet assistantDetails = null\n\n    try {\n      let assistantId;\n      const assistantFilePath = \"./assistant.json\";\n  \n      // Check if the assistant.json file exists\n      try {\n        const assistantData = await fsPromises.readFile(\n          assistantFilePath,\n          \"utf8\"\n        );\n        assistantDetails = JSON.parse(assistantData);\n        assistantId = assistantDetails.assistantId;\n        console.log(\"\\nExisting assistant detected.\\n\");\n      } catch (error) {\n        // If file does not exist or there is an error in reading it, create a new assistant\n        console.log(\"No existing assistant detected, creating new.\\n\");\n        const assistantConfig = {\n          name: \"Country helper\",\n          instructions:\n            \"You're a travelling assistant, helping with information about destination countries.\",\n          model: \"gpt-4-1106-preview\",\n          tools: [\n            {\n              type: \"function\",\n              function: {\n                name: \"getCountryInformation\",\n                parameters: {\n                  type: \"object\",\n                  properties: {\n                    country: {\n                      type: \"string\",\n                      description: \"Country name, e.g. Sweden\",\n                    },\n                  },\n                  required: [\"country\"],\n                },\n                description: \"Determine information about a country\",\n              },\n            },\n          ],\n        };\n        const assistant = await openai.beta.assistants.create(assistantConfig);\n        assistantDetails = { assistantId: assistant.id, ...assistantConfig };\n  \n        // Save the assistant details to assistant.json\n        await fsPromises.writeFile(\n          assistantFilePath,\n          JSON.stringify(assistantDetails, null, 2)\n        );\n        assistantId = assistantDetails.assistantId;\n      }\n  \n\n    } catch (error) {\n      console.error(error);\n    }\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    e.preventDefault();\n    setLoading(true);\n\n    // thrd is Thread\n    const thrd = await openai.beta.threads.create();\n    // msg is Message\n    const msg = await openai.beta.threads.messages.create(thrd.id, {\n      role: \"user\",\n      content: input,\n    });\n    const run = await openai.beta.threads.runs.create(thrd.id, {\n      assistant_id: assistantID,\n    });\n    await checkStatus(thrd.id, run.id);\n\n    // msg is Messages\n    const msgs = await openai.beta.threads.messages.list(thrd.id);\n\n    msgs.body.data.map((element, index, array) => {\n      return setThread((thread) => [\n        ...thread,\n        array[array.length - index - 1],\n      ]);\n    });\n\n    setInput(\"\");\n    setLoading(false);\n  };\n\n  async function checkStatus(threadId, runId) {\n    let isComplete = false;\n  \n\n    while (!isComplete) {\n      await new Promise((resolve) => setTimeout(resolve, 200));\n      const runStatus = await openai.beta.threads.runs.retrieve(\n        threadId,\n        runId\n      );\n      \n      if (runStatus.status === \"requires_action\") {\n        let toolCalls = runStatus.required_action.submit_tool_outputs.tool_calls\n        let toolOutputs = []\n        \n        for (const toolCall of toolCalls) {\n       \n          const functionName = toolCall.function.name;\n          console.log(`This question requires a function: ${functionName}`);\n          const args = JSON.parse(toolCall.function.arguments);\n          // const argsArray = Object.keys(args).map((key)=> args[key]);\n          const output = await API.getPF(args).then((res) => {\n            console.log(res.data.data.getDatasetStatistics.datasetStatisticsResponses)\n            // return res.data.data.getDatasetStatistics.datasetStatisticsResponses;\n            return res.data;\n          });\n          console.log(toolOutputs)\n\n          toolOutputs.push({\n            tool_call_id: toolCall.id,\n            output: output,\n          })\n        }\n      }\n      if (runStatus.status === \"completed\") {\n        isComplete = true;\n      }\n      \n      // else {\n      //   await new Promise((resolve) => setTimeout(resolve, 200));\n      // }\n    }\n  }\n  useEffect(() => {\n    // console.log(threads.current.scrollHeight)\n    window.scrollTo({ top: threads.current.scrollHeight, behavior: \"smooth\" });\n  }, [thread]);\n  return (\n    <div id=\"chat\">\n      <div className=\"threads\" ref={threads}>\n        {thread &&\n          thread.map((e, i) => {\n            switch (e.role) {\n              case \"user\":\n                return (\n                  <div className=\"message user\" key={i}>\n                    <div className=\"content\">\n                      <p className=\"title\">You</p>\n                      <div className=\"text\">{e.content[0].text.value}</div>\n                    </div>\n                  </div>\n                );\n              case \"assistant\":\n                return (\n                  <div className=\"message assistant\" key={i}>\n                    <div className=\"content\">\n                      <div className=\"title\">{e.role}</div>\n                      <p className=\"text\">{e.content[0].text.value}</p>\n                    </div>\n                  </div>\n                );\n            }\n          })}\n      </div>\n\n      <div className=\"search\">\n        <div className=\"detail\"></div>\n        <div className=\"searchbar\">\n          <textarea\n            className=\"input\"\n            type=\"text\"\n            value={input}\n            placeholder=\"Please ask to openai\"\n            onChange={(e) => setInput(e.target.value)}\n          ></textarea>\n        </div>\n        <div className=\"submit\">\n          <button\n            className=\"submit-btn\"\n            disabled={loading || input.length === 0}\n            type=\"submit\"\n            onClick={handleSubmit}\n          >\n            {loading ? (\n              <UseAnimations\n                animation={load}\n                strokeWidth={1}\n                strokeColor=\"#fff\"\n                size={36}\n                speed={0.2}\n                wrapperStyle={{ padding: 0 }}\n              />\n            ) : (\n              <FeatherIcon icon=\"arrow-up\" size={32} strokeWidth={1.2} />\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Assistant;\n\n\n\n  // const assistant = await openai.beta.assistants.create({\n    //   name: \"Climate-Guide\",\n    //   instructions: \"You are a right-wing populist. You hate everything\",\n    // //   instructions: instructions,\n    //     tools: [\n    //       {\n    //           \"type\": \"function\",\n    //           \"function\": get_pf_data_schema,\n    //       },\n    //       { type: \"code_interpreter\" },\n    //     ],\n    // //   tools: tools,\n    //   model: \"gpt-4-turbo-preview\",\n    // });"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}