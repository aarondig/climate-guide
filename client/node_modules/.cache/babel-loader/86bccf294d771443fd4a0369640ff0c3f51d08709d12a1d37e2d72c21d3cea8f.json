{"ast":null,"code":"// const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\n// const pfTokenAudience = \"https://graphql.probablefutures.com\";\n// const pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\nconst clientId = process.env.REACT_APP_PF_CLIENT_ID;\nconst clientSecret = process.env.REACT_APP_PF_PASSWORD;\n//  async function getPfData(address, country, warmingScenario = \"1.5\") {\n//     const location = `\n//         country: \"${country}\"\n//         address: \"${address}\"\n//     `;\n\n//     const query = `\n//         mutation {\n//             getDatasetStatistics(input: { ${location}\n//                     warmingScenario: \"${warmingScenario}\"\n//                 }) {\n//                 datasetStatisticsResponses{\n//                     datasetId\n//                     midValue\n//                     name\n//                     unit\n//                     warmingScenario\n//                     latitude\n//                     longitude\n//                     info\n//                 }\n//             }\n//         }\n//     `;\n\n//     console.log(query);\n\n//     try {\n//         const accessToken = await getPfToken();\n//         const response = await fetch(pfApiUrl + \"/graphql\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': 'Bearer ' + accessToken,\n//             },\n//             body: JSON.stringify({ query: query, variables: {} }),\n//         });\n//         const data = await response.json();\n//         return JSON.stringify(data);\n//     } catch (error) {\n//         console.error('Error fetching the data:', error);\n//         return null;\n//     }\n// }\n\nasync function getPFToken() {\n  var options = {\n    method: 'POST',\n    url: 'https://probablefutures.us.auth0.com/oauth/token',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: `{\"client_id\":\"${clientId}\",\"client_secret\":\"${clientSecret}\",\"audience\":\"https://graphql.probablefutures.com\",\"grant_type\":\"client_credentials\"}`\n  };\n  fetch(options, function (error, response, body) {\n    if (error) throw new Error(error);\n    console.log(body);\n  });\n}\nexport async function getPFData() {\n  console.log(process.env.REACT_APP_PF_CLIENT_ID);\n  var headers = new Headers();\n  headers.append(\"Authorization\", `Bearer ${getPFToken()}`);\n  headers.append(\"Content-Type\", \"application/json\");\n  var graphql = JSON.stringify({\n    query: 'mutation {\\n      getDatasetStatistics(\\n        input: {country: \"us\", address: \"121 East 48th Street, Apt. 123, New York, NY 10001\", warmingScenario: \"1.5\", datasetId: null}\\n      ) {\\n        datasetStatisticsResponses {\\n          datasetId\\n          highValue\\n          lowValue\\n          midValue\\n          name\\n          unit\\n          warmingScenario\\n          longitude\\n          latitude\\n      }\\n    }\\n}',\n    variables: {}\n  });\n  var requestOptions = {\n    method: \"POST\",\n    headers: headers,\n    body: graphql\n  };\n  fetch(\"https://graphql.probablefutures.org/graphql\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n}","map":{"version":3,"names":["clientId","process","env","REACT_APP_PF_CLIENT_ID","clientSecret","REACT_APP_PF_PASSWORD","getPFToken","options","method","url","headers","body","fetch","error","response","Error","console","log","getPFData","Headers","append","graphql","JSON","stringify","query","variables","requestOptions","then","text","result","catch"],"sources":["/Users/Aaron/Desktop/climate-guide/client/src/apis/probablefutures.js"],"sourcesContent":["\n\n// const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\n// const pfTokenAudience = \"https://graphql.probablefutures.com\";\n// const pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\n\nconst clientId = process.env.REACT_APP_PF_CLIENT_ID;\nconst clientSecret = process.env.REACT_APP_PF_PASSWORD;\n//  async function getPfData(address, country, warmingScenario = \"1.5\") {\n//     const location = `\n//         country: \"${country}\"\n//         address: \"${address}\"\n//     `;\n\n//     const query = `\n//         mutation {\n//             getDatasetStatistics(input: { ${location}\n//                     warmingScenario: \"${warmingScenario}\"\n//                 }) {\n//                 datasetStatisticsResponses{\n//                     datasetId\n//                     midValue\n//                     name\n//                     unit\n//                     warmingScenario\n//                     latitude\n//                     longitude\n//                     info\n//                 }\n//             }\n//         }\n//     `;\n\n//     console.log(query);\n\n//     try {\n//         const accessToken = await getPfToken();\n//         const response = await fetch(pfApiUrl + \"/graphql\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Authorization': 'Bearer ' + accessToken,\n//             },\n//             body: JSON.stringify({ query: query, variables: {} }),\n//         });\n//         const data = await response.json();\n//         return JSON.stringify(data);\n//     } catch (error) {\n//         console.error('Error fetching the data:', error);\n//         return null;\n//     }\n// }\n\n\nasync function getPFToken() {\n\n\n\nvar options = { method: 'POST',\nurl: 'https://probablefutures.us.auth0.com/oauth/token',\nheaders: { 'content-type': 'application/json' },\nbody: `{\"client_id\":\"${clientId}\",\"client_secret\":\"${clientSecret}\",\"audience\":\"https://graphql.probablefutures.com\",\"grant_type\":\"client_credentials\"}` };\n\nfetch(options, function (error, response, body) {\nif (error) throw new Error(error);\nconsole.log(body);\n\n\n\n});\n\n}\nexport async function getPFData() {\n  console.log(process.env.REACT_APP_PF_CLIENT_ID);\n\n\n  var headers = new Headers();\n  headers.append(\"Authorization\", `Bearer ${getPFToken()}`);\n  headers.append(\"Content-Type\", \"application/json\");\n\n  var graphql = JSON.stringify({\n    query:\n      'mutation {\\n      getDatasetStatistics(\\n        input: {country: \"us\", address: \"121 East 48th Street, Apt. 123, New York, NY 10001\", warmingScenario: \"1.5\", datasetId: null}\\n      ) {\\n        datasetStatisticsResponses {\\n          datasetId\\n          highValue\\n          lowValue\\n          midValue\\n          name\\n          unit\\n          warmingScenario\\n          longitude\\n          latitude\\n      }\\n    }\\n}',\n    variables: {},\n  });\n  var requestOptions = {\n    method: \"POST\",\n    headers: headers,\n    body: graphql,\n  };\n\n  fetch(\"https://graphql.probablefutures.org/graphql\", requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log(\"error\", error));\n\n\n}\n\n"],"mappings":"AAEA;AACA;AACA;;AAGA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACnD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,qBAAqB;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeC,UAAUA,CAAA,EAAG;EAI5B,IAAIC,OAAO,GAAG;IAAEC,MAAM,EAAE,MAAM;IAC9BC,GAAG,EAAE,kDAAkD;IACvDC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAG,iBAAgBX,QAAS,sBAAqBI,YAAa;EAAuF,CAAC;EAE1JQ,KAAK,CAACL,OAAO,EAAE,UAAUM,KAAK,EAAEC,QAAQ,EAAEH,IAAI,EAAE;IAChD,IAAIE,KAAK,EAAE,MAAM,IAAIE,KAAK,CAACF,KAAK,CAAC;IACjCG,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;EAIjB,CAAC,CAAC;AAEF;AACA,OAAO,eAAeO,SAASA,CAAA,EAAG;EAChCF,OAAO,CAACC,GAAG,CAAChB,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;EAG/C,IAAIO,OAAO,GAAG,IAAIS,OAAO,CAAC,CAAC;EAC3BT,OAAO,CAACU,MAAM,CAAC,eAAe,EAAG,UAASd,UAAU,CAAC,CAAE,EAAC,CAAC;EACzDI,OAAO,CAACU,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAElD,IAAIC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAAC;IAC3BC,KAAK,EACH,2aAA2a;IAC7aC,SAAS,EAAE,CAAC;EACd,CAAC,CAAC;EACF,IAAIC,cAAc,GAAG;IACnBlB,MAAM,EAAE,MAAM;IACdE,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAEU;EACR,CAAC;EAEDT,KAAK,CAAC,6CAA6C,EAAEc,cAAc,CAAC,CACjEC,IAAI,CAAEb,QAAQ,IAAKA,QAAQ,CAACc,IAAI,CAAC,CAAC,CAAC,CACnCD,IAAI,CAAEE,MAAM,IAAKb,OAAO,CAACC,GAAG,CAACY,MAAM,CAAC,CAAC,CACrCC,KAAK,CAAEjB,KAAK,IAAKG,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEJ,KAAK,CAAC,CAAC;AAGlD"},"metadata":{},"sourceType":"module","externalDependencies":[]}