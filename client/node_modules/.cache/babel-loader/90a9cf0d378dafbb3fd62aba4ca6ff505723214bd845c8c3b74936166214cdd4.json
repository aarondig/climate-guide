{"ast":null,"code":"import{useState,useEffect}from\"react\";import\"./App.css\";import OpenAI from\"openai\";// import {getPFData} from './apis/probablefutures';\n// PROBABLE FUTURES API KEY = FQCzxCCBAh0wih1Yx0DFqheeldF0T6FD\n// PROBABLE FUTURES API PASSWORD = v6mbHDocvyWPM9pNYNBxvdZda1_yFq4DY_1QS5kVNWuGZGlDg4Lri89szt1KIe8W\nimport API from\"../src/utils/API\";import Assistant from\"./apis/openai\";import{jsx as _jsx}from\"react/jsx-runtime\";const ChatbotApp=()=>{// const [address, setAddress] = useState(\"\");\n// const [country, setCountry] = useState();\n// const handleclick = () => {\n//   // console.log(API.getData())\n//   API.getData({ address, country }).then((res) => {\n//     // console.log(res.data.getDataStatistics.getDataStatistics);\n//     // console.log(res.data.data.getDatasetStatistics.datasetStatisticsResponses);\n//   });\n// };\n// const openai = new OpenAI({\n//   apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n//   dangerouslyAllowBrowser: true,\n// });\n// const [response, setResponse] = useState([]);\n// const [input, setInput] = useState(\"\");\n// const [loading, setLoading] = useState(false);\n// // const handleSubmit = async (e) => {\n// //   e.preventDefault();\n// //   setLoading(true);\n// //   const stream = await openai.chat.completions.create({\n// //     model: \"gpt-3.5-turbo\",\n// //     messages: [\n// //       { role: \"system\", content: \"you are a helpful assistant\" },\n// //       { role: \"user\", content: input },\n// //     ],\n// //     stream: true,\n// //   });\n// //   for await (const chunk of stream) {\n// //     console.log(chunk.choices[0]?.delta?.content || \"\");\n// //     setResponse((response) => [\n// //       ...response,\n// //       chunk.choices[0]?.delta?.content || \"\",\n// //     ]);\n// //   }\n// //   setInput(\"\");\n// //   setLoading(false);\n// // };\n// const handleSubmit = async (e) => {\n//   e.preventDefault();\n//   setLoading(true);\n//   const stream = await openai.chat.completions.create({\n//     model: \"gpt-3.5-turbo\",\n//     messages: [\n//       { role: \"system\", content: \"you are a helpful assistant\" },\n//       { role: \"user\", content: input },\n//     ],\n//     stream: true,\n//   });\n//   for await (const chunk of stream) {\n//     console.log(chunk.choices[0]?.delta?.content || \"\");\n//     setResponse((response) => [\n//       ...response,\n//       chunk.choices[0]?.delta?.content || \"\",\n//     ]);\n//   }\n//   setInput(\"\");\n//   setLoading(false);\n// };\nreturn/*#__PURE__*/_jsx(\"main\",{id:\"app\",children:/*#__PURE__*/_jsx(Assistant,{})})// <>\n//  <div className=\"testbox\"\n//  style={{\n//   display: \"flex\",\n//   justifyContent: \"center\",\n//   alignItems: \"center\",\n//   width: \"100%\",\n//   whiteSpace: \"wrap\",\n// }}>\n//     <pre style={{\n//   width: \"80%\",\n//   padding: \"20px\",\n//   whiteSpace: \"wrap\",\n// }}>\n//         <strong>API completion:</strong>\n//         {response} <br/>\n//       </pre>\n//       </div>\n//   <div\n//     style={{\n//       position: \"absolute\",\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       alignItems: \"center\",\n//       height: \"100%\",\n//       width: \"100%\",\n//     }}\n//   >\n//     {/* <button onClick={()=>getPFData()}>HIT ME</button> */}\n//     <textarea\n//       type=\"text\"\n//       value={country}\n//       placeholder=\"Country\"\n//       onChange={(e) => setCountry(e.target.value)}\n//     ></textarea>\n//     <button onClick={() => handleclick()}>HIT ME</button>\n//     <form onSubmit={handleSubmit}>\n//       {/* <form onSubmit={getPfData()}> */}\n//       <textarea\n//         type=\"text\"\n//         value={input}\n//         placeholder=\"Please ask to openai\"\n//         onChange={(e) => setInput(e.target.value)}\n//       ></textarea>\n//       <button disabled={loading || input.length === 0} type=\"submit\">\n//         {loading ? \"Generating...\" : \"Generate\"}\n//       </button>\n//     </form>\n//   </div>\n//   {response && (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         justifyContent: \"left\",\n//         boxSizing: \"border-box\",\n//         // height:'20vh',\n//         // background: \"black\",\n//       }}\n//     >\n//     </div>\n//   )}\n// </>\n;};export default ChatbotApp;","map":{"version":3,"names":["useState","useEffect","OpenAI","API","Assistant","jsx","_jsx","ChatbotApp","id","children"],"sources":["/Users/Aaron/Desktop/climate-guide/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport OpenAI from \"openai\";\n// import {getPFData} from './apis/probablefutures';\n\n// PROBABLE FUTURES API KEY = FQCzxCCBAh0wih1Yx0DFqheeldF0T6FD\n// PROBABLE FUTURES API PASSWORD = v6mbHDocvyWPM9pNYNBxvdZda1_yFq4DY_1QS5kVNWuGZGlDg4Lri89szt1KIe8W\n\nimport API from \"../src/utils/API\";\nimport Assistant from \"./apis/openai\";\n\nconst ChatbotApp = () => {\n  // const [address, setAddress] = useState(\"\");\n  // const [country, setCountry] = useState();\n\n  // const handleclick = () => {\n  //   // console.log(API.getData())\n\n  //   API.getData({ address, country }).then((res) => {\n  //     // console.log(res.data.getDataStatistics.getDataStatistics);\n  //     // console.log(res.data.data.getDatasetStatistics.datasetStatisticsResponses);\n  //   });\n  // };\n\n  // const openai = new OpenAI({\n  //   apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  //   dangerouslyAllowBrowser: true,\n  // });\n\n  // const [response, setResponse] = useState([]);\n  // const [input, setInput] = useState(\"\");\n  // const [loading, setLoading] = useState(false);\n\n  // // const handleSubmit = async (e) => {\n  // //   e.preventDefault();\n  // //   setLoading(true);\n\n  // //   const stream = await openai.chat.completions.create({\n  // //     model: \"gpt-3.5-turbo\",\n  // //     messages: [\n  // //       { role: \"system\", content: \"you are a helpful assistant\" },\n  // //       { role: \"user\", content: input },\n  // //     ],\n\n  // //     stream: true,\n  // //   });\n  // //   for await (const chunk of stream) {\n  // //     console.log(chunk.choices[0]?.delta?.content || \"\");\n  // //     setResponse((response) => [\n  // //       ...response,\n  // //       chunk.choices[0]?.delta?.content || \"\",\n  // //     ]);\n  // //   }\n\n  // //   setInput(\"\");\n  // //   setLoading(false);\n  // // };\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   setLoading(true);\n\n  //   const stream = await openai.chat.completions.create({\n  //     model: \"gpt-3.5-turbo\",\n  //     messages: [\n  //       { role: \"system\", content: \"you are a helpful assistant\" },\n  //       { role: \"user\", content: input },\n  //     ],\n\n  //     stream: true,\n  //   });\n  //   for await (const chunk of stream) {\n  //     console.log(chunk.choices[0]?.delta?.content || \"\");\n  //     setResponse((response) => [\n  //       ...response,\n  //       chunk.choices[0]?.delta?.content || \"\",\n  //     ]);\n  //   }\n\n  //   setInput(\"\");\n  //   setLoading(false);\n  // };\n\n\n\n  return (\n    <main id=\"app\">\n    <Assistant/>\n    </main>\n    // <>\n    //  <div className=\"testbox\"\n    //  style={{\n    //   display: \"flex\",\n    //   justifyContent: \"center\",\n    //   alignItems: \"center\",\n    //   width: \"100%\",\n    //   whiteSpace: \"wrap\",\n\n    // }}>\n    //     <pre style={{\n    //   width: \"80%\",\n    //   padding: \"20px\",\n    //   whiteSpace: \"wrap\",\n      \n    // }}>\n    //         <strong>API completion:</strong>\n    //         {response} <br/>\n    //       </pre>\n    //       </div>\n    //   <div\n    //     style={{\n    //       position: \"absolute\",\n    //       display: \"flex\",\n    //       justifyContent: \"center\",\n    //       alignItems: \"center\",\n    //       height: \"100%\",\n    //       width: \"100%\",\n    //     }}\n    //   >\n       \n    //     {/* <button onClick={()=>getPFData()}>HIT ME</button> */}\n    //     <textarea\n    //       type=\"text\"\n    //       value={country}\n    //       placeholder=\"Country\"\n    //       onChange={(e) => setCountry(e.target.value)}\n    //     ></textarea>\n    //     <button onClick={() => handleclick()}>HIT ME</button>\n\n    //     <form onSubmit={handleSubmit}>\n    //       {/* <form onSubmit={getPfData()}> */}\n    //       <textarea\n    //         type=\"text\"\n    //         value={input}\n    //         placeholder=\"Please ask to openai\"\n    //         onChange={(e) => setInput(e.target.value)}\n    //       ></textarea>\n    //       <button disabled={loading || input.length === 0} type=\"submit\">\n    //         {loading ? \"Generating...\" : \"Generate\"}\n    //       </button>\n    //     </form>\n    //   </div>\n    //   {response && (\n    //     <div\n    //       style={{\n    //         display: \"flex\",\n    //         justifyContent: \"left\",\n    //         boxSizing: \"border-box\",\n    //         // height:'20vh',\n    //         // background: \"black\",\n    //       }}\n    //     >\n          \n    //     </div>\n    //   )}\n    // </>\n  );\n};\n\nexport default ChatbotApp;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,WAAW,CAClB,MAAO,CAAAC,MAAM,KAAM,QAAQ,CAC3B;AAEA;AACA;AAEA,MAAO,CAAAC,GAAG,KAAM,kBAAkB,CAClC,MAAO,CAAAC,SAAS,KAAM,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA,mBACED,IAAA,SAAME,EAAE,CAAC,KAAK,CAAAC,QAAA,cACdH,IAAA,CAACF,SAAS,GAAC,CAAC,CACN,CACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA,CAEJ,CAAC,CAED,cAAe,CAAAG,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}