{"ast":null,"code":"const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\nasync function getPfToken() {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", `Bearer ${process.env.REACT_APP_PF_PASSWORD}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  console.log(process.env.REACT_APP_PF_CLIENT_ID);\n  const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n  var graphql = JSON.stringify({\n    query: \"mutation {\\n      getDatasetStatistics(\\n        input: {country: \\\"us\\\", address: \\\"121 East 48th Street, Apt. 123, New York, NY 10001\\\", warmingScenario: \\\"1.5\\\", datasetId: null}\\n      ) {\\n        datasetStatisticsResponses {\\n          datasetId\\n          highValue\\n          lowValue\\n          midValue\\n          name\\n          unit\\n          warmingScenario\\n          longitude\\n          latitude\\n      }\\n    }\\n}\",\n    variables: {}\n  });\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: graphql\n  };\n  fetch(\"https://graphql.probablefutures.org/graphql\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n\n  // try {\n  //     const response = await fetch(pfTokenUrl, {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify({\n  //             client_id: clientId,\n  //             client_secret: clientSecret,\n  //             audience: pfTokenAudience,\n  //             grant_type: \"client_credentials\",\n  //         }),\n  //         // body: {\n  //         //     \"client_id\": clientId,\n  //         //     \"client_secret\": clientSecret,\n  //         //     \"audience\": pfTokenAudience,\n  //         //     \"grant_type\": \"client_credentials\",\n  //         // },\n  //     });\n  //     const data = await response.json();\n  //     return data.access_token;\n  // } catch (error) {\n  //     console.error('Error fetching the access token:', error);\n  //     return null;\n  // }\n}\nexport async function getPfData(address, country, warmingScenario = \"1.5\") {\n  const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n  const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n  console.log(query);\n  try {\n    const accessToken = await getPfToken();\n    const response = await fetch(pfApiUrl + \"/graphql\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: {}\n      })\n    });\n    const data = await response.json();\n    return JSON.stringify(data);\n  } catch (error) {\n    console.error('Error fetching the data:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["pfApiUrl","pfTokenAudience","pfTokenUrl","getPfToken","myHeaders","Headers","append","process","env","REACT_APP_PF_PASSWORD","console","log","REACT_APP_PF_CLIENT_ID","clientId","clientSecret","graphql","JSON","stringify","query","variables","requestOptions","method","headers","body","fetch","then","response","text","result","catch","error","getPfData","address","country","warmingScenario","location","accessToken","data","json"],"sources":["/Users/Aaron/Desktop/climate-guide/src/apis/probablefutures.js"],"sourcesContent":["const pfApiUrl = \"https://graphql.probablefutures.org/graphql\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\nasync function getPfToken() {\n\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", `Bearer ${process.env.REACT_APP_PF_PASSWORD}`);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    console.log(process.env.REACT_APP_PF_CLIENT_ID)\n    const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n    const clientSecret = process.env.REACT_APP_PF_PASSWORD;\nvar graphql = JSON.stringify({\n    query: \"mutation {\\n      getDatasetStatistics(\\n        input: {country: \\\"us\\\", address: \\\"121 East 48th Street, Apt. 123, New York, NY 10001\\\", warmingScenario: \\\"1.5\\\", datasetId: null}\\n      ) {\\n        datasetStatisticsResponses {\\n          datasetId\\n          highValue\\n          lowValue\\n          midValue\\n          name\\n          unit\\n          warmingScenario\\n          longitude\\n          latitude\\n      }\\n    }\\n}\",\n    variables: {}\n  })\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: graphql,\n  };\n  \n  fetch(\"https://graphql.probablefutures.org/graphql\", requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error));\n\n\n\n \n\n   \n\n    // try {\n    //     const response = await fetch(pfTokenUrl, {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //         body: JSON.stringify({\n    //             client_id: clientId,\n    //             client_secret: clientSecret,\n    //             audience: pfTokenAudience,\n    //             grant_type: \"client_credentials\",\n    //         }),\n    //         // body: {\n    //         //     \"client_id\": clientId,\n    //         //     \"client_secret\": clientSecret,\n    //         //     \"audience\": pfTokenAudience,\n    //         //     \"grant_type\": \"client_credentials\",\n    //         // },\n    //     });\n    //     const data = await response.json();\n    //     return data.access_token;\n    // } catch (error) {\n    //     console.error('Error fetching the access token:', error);\n    //     return null;\n    // }\n}\n\nexport async function getPfData(address, country, warmingScenario = \"1.5\") {\n    const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n\n    const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n\n    console.log(query);\n\n    try {\n        const accessToken = await getPfToken();\n        const response = await fetch(pfApiUrl + \"/graphql\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + accessToken,\n            },\n            body: JSON.stringify({ query: query, variables: {} }),\n        });\n        const data = await response.json();\n        return JSON.stringify(data);\n    } catch (error) {\n        console.error('Error fetching the data:', error);\n        return null;\n    }\n}\n\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,6CAA6C;AAC9D,MAAMC,eAAe,GAAG,qCAAqC;AAC7D,MAAMC,UAAU,GAAG,kDAAkD;AAErE,eAAeC,UAAUA,CAAA,EAAG;EAGxB,IAAIC,SAAS,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7BD,SAAS,CAACE,MAAM,CAAC,eAAe,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,qBAAsB,EAAC,CAAC;EAChFL,SAAS,CAACE,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAGpDI,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACC,GAAG,CAACI,sBAAsB,CAAC;EAC/C,MAAMC,QAAQ,GAAGN,OAAO,CAACC,GAAG,CAACI,sBAAsB;EACnD,MAAME,YAAY,GAAGP,OAAO,CAACC,GAAG,CAACC,qBAAqB;EAC1D,IAAIM,OAAO,GAAGC,IAAI,CAACC,SAAS,CAAC;IACzBC,KAAK,EAAE,ibAAib;IACxbC,SAAS,EAAE,CAAC;EACd,CAAC,CAAC;EACF,IAAIC,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAElB,SAAS;IAClBmB,IAAI,EAAER;EACR,CAAC;EAEDS,KAAK,CAAC,6CAA6C,EAAEJ,cAAc,CAAC,CACjEK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAIlB,OAAO,CAACC,GAAG,CAACiB,MAAM,CAAC,CAAC,CACnCC,KAAK,CAACC,KAAK,IAAIpB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEmB,KAAK,CAAC,CAAC;;EAQ5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAEA,OAAO,eAAeC,SAASA,CAACC,OAAO,EAAEC,OAAO,EAAEC,eAAe,GAAG,KAAK,EAAE;EACvE,MAAMC,QAAQ,GAAI;AACtB,oBAAoBF,OAAQ;AAC5B,oBAAoBD,OAAQ;AAC5B,KAAK;EAED,MAAMd,KAAK,GAAI;AACnB;AACA,4CAA4CiB,QAAS;AACrD,wCAAwCD,eAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAEDxB,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;EAElB,IAAI;IACA,MAAMkB,WAAW,GAAG,MAAMjC,UAAU,CAAC,CAAC;IACtC,MAAMuB,QAAQ,GAAG,MAAMF,KAAK,CAACxB,QAAQ,GAAG,UAAU,EAAE;MAChDqB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGc;MACjC,CAAC;MACDb,IAAI,EAAEP,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK,EAAEA,KAAK;QAAEC,SAAS,EAAE,CAAC;MAAE,CAAC;IACxD,CAAC,CAAC;IACF,MAAMkB,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,OAAOtB,IAAI,CAACC,SAAS,CAACoB,IAAI,CAAC;EAC/B,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZpB,OAAO,CAACoB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}