{"ast":null,"code":"const axios = require(\"axios\");\n// const router = require(\"express\").Router();\n\nconst pfApiUrl = \"https://graphql.probablefutures.org\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\nconst clientId = \"FQCzxCCBAh0wih1Yx0DFqheeldF0T6FD\";\nconst clientSecret = \"v6mbHDocvyWPM9pNYNBxvdZda1_yFq4DY_1QS5kVNWuGZGlDg4Lri89szt1KIe8W\";\n\n// router.get(\"/\", (req, res) => {\n\nasync function getPfToken() {\n  // const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n  // const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n  try {\n    const response = await axios.post(pfTokenUrl, {\n      client_id: clientId,\n      client_secret: clientSecret,\n      audience: pfTokenAudience,\n      grant_type: \"client_credentials\"\n    });\n    const accessToken = response.data.access_token;\n    return accessToken;\n  } catch (error) {\n    console.error('Error fetching the access token:', error);\n    return null;\n  }\n}\nasync function getPfData({\n  country,\n  address,\n  warmingScenario = 1.5\n}) {\n  console.log(req);\n\n  // const country = req.query.country;\n  // const address = req.query.address;\n  // const warmingScenario = `${req.query.warming_scenario !== undefined ? req.query.warming_scenario : 1.5}`;\n\n  const variables = {};\n  const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n  const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n  try {\n    const accessToken = await getPfToken();\n    const url = pfApiUrl + \"/graphql\";\n    const headers = {\n      Authorization: \"Bearer \" + accessToken\n    };\n    const response = await axios.post(url, {\n      query: query,\n      variables: variables\n    }, {\n      headers: headers\n    });\n    // await res.send(JSON.stringify(response.data))\n    return JSON.stringify(response.data);\n  } catch (error) {\n    console.error('Error fetching the data:', error);\n    return null;\n  }\n}\nexport default getPfData();\n// });\n\n// module.exports = router;","map":{"version":3,"names":["axios","require","pfApiUrl","pfTokenAudience","pfTokenUrl","clientId","clientSecret","getPfToken","response","post","client_id","client_secret","audience","grant_type","accessToken","data","access_token","error","console","getPfData","country","address","warmingScenario","log","req","variables","location","query","url","headers","Authorization","JSON","stringify"],"sources":["/Users/Aaron/Desktop/climate-guide/client/src/apis/probablefutures.js"],"sourcesContent":["const axios = require(\"axios\");\n// const router = require(\"express\").Router();\n\n\nconst pfApiUrl = \"https://graphql.probablefutures.org\";\nconst pfTokenAudience = \"https://graphql.probablefutures.com\";\nconst pfTokenUrl = \"https://probablefutures.us.auth0.com/oauth/token\";\n\nconst clientId = \"FQCzxCCBAh0wih1Yx0DFqheeldF0T6FD\"\nconst clientSecret = \"v6mbHDocvyWPM9pNYNBxvdZda1_yFq4DY_1QS5kVNWuGZGlDg4Lri89szt1KIe8W\"\n\n// router.get(\"/\", (req, res) => {\n\n  async function getPfToken() {\n    // const clientId = process.env.REACT_APP_PF_CLIENT_ID;\n    // const clientSecret = process.env.REACT_APP_PF_PASSWORD;\n    try {\n        const response = await axios.post(pfTokenUrl, {\n            client_id: clientId,\n            client_secret: clientSecret,\n            audience: pfTokenAudience,\n            grant_type: \"client_credentials\",\n        });\n        const accessToken = response.data.access_token;\n        return accessToken;\n    } catch (error) {\n        console.error('Error fetching the access token:', error);\n        return null;\n    }\n}\n\nasync function getPfData({country, address, warmingScenario = 1.5}) {\n  console.log(req)\n \n  \n// const country = req.query.country;\n// const address = req.query.address;\n// const warmingScenario = `${req.query.warming_scenario !== undefined ? req.query.warming_scenario : 1.5}`;\n\n    const variables = {};\n    const location = `\n        country: \"${country}\"\n        address: \"${address}\"\n    `;\n\n    const query = `\n        mutation {\n            getDatasetStatistics(input: { ${location}\n                    warmingScenario: \"${warmingScenario}\" \n                }) {\n                datasetStatisticsResponses{\n                    datasetId\n                    midValue\n                    name\n                    unit\n                    warmingScenario\n                    latitude\n                    longitude\n                    info\n                }\n            }\n        }\n    `;\n\n    try {\n        const accessToken = await getPfToken();\n        const url = pfApiUrl + \"/graphql\";\n        const headers = { Authorization: \"Bearer \" + accessToken };\n        const response = await axios.post(url, { query: query, variables: variables }, { headers: headers });\n        // await res.send(JSON.stringify(response.data))\n        return JSON.stringify(response.data);\n    } catch (error) {\n        console.error('Error fetching the data:', error);\n        return null;\n    }\n  }\n\n\nexport default getPfData();\n// });\n\n// module.exports = router;"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B;;AAGA,MAAMC,QAAQ,GAAG,qCAAqC;AACtD,MAAMC,eAAe,GAAG,qCAAqC;AAC7D,MAAMC,UAAU,GAAG,kDAAkD;AAErE,MAAMC,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,YAAY,GAAG,kEAAkE;;AAEvF;;AAEE,eAAeC,UAAUA,CAAA,EAAG;EAC1B;EACA;EACA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAACL,UAAU,EAAE;MAC1CM,SAAS,EAAEL,QAAQ;MACnBM,aAAa,EAAEL,YAAY;MAC3BM,QAAQ,EAAET,eAAe;MACzBU,UAAU,EAAE;IAChB,CAAC,CAAC;IACF,MAAMC,WAAW,GAAGN,QAAQ,CAACO,IAAI,CAACC,YAAY;IAC9C,OAAOF,WAAW;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACf;AACJ;AAEA,eAAeE,SAASA,CAAC;EAACC,OAAO;EAAEC,OAAO;EAAEC,eAAe,GAAG;AAAG,CAAC,EAAE;EAClEJ,OAAO,CAACK,GAAG,CAACC,GAAG,CAAC;;EAGlB;EACA;EACA;;EAEI,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,MAAMC,QAAQ,GAAI;AACtB,oBAAoBN,OAAQ;AAC5B,oBAAoBC,OAAQ;AAC5B,KAAK;EAED,MAAMM,KAAK,GAAI;AACnB;AACA,4CAA4CD,QAAS;AACrD,wCAAwCJ,eAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAED,IAAI;IACA,MAAMR,WAAW,GAAG,MAAMP,UAAU,CAAC,CAAC;IACtC,MAAMqB,GAAG,GAAG1B,QAAQ,GAAG,UAAU;IACjC,MAAM2B,OAAO,GAAG;MAAEC,aAAa,EAAE,SAAS,GAAGhB;IAAY,CAAC;IAC1D,MAAMN,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAACmB,GAAG,EAAE;MAAED,KAAK,EAAEA,KAAK;MAAEF,SAAS,EAAEA;IAAU,CAAC,EAAE;MAAEI,OAAO,EAAEA;IAAQ,CAAC,CAAC;IACpG;IACA,OAAOE,IAAI,CAACC,SAAS,CAACxB,QAAQ,CAACO,IAAI,CAAC;EACxC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACf;AACF;AAGF,eAAeE,SAAS,CAAC,CAAC;AAC1B;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}